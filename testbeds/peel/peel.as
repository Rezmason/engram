const FAT:uint = 10;var stickerTop:DisplayObject = new StickerTop;var stickerBottom:DisplayObject = new StickerBottom;var shadow:DisplayObject = new Shadow;var shadowMask:DisplayObject = new StickerTop;var shine:DisplayObject = new Shine;var shineMask:DisplayObject = new StickerBottom;var topMask:DisplayObject = new Mask;var bottomMask:DisplayObject = new Mask;var bottomSide:Sprite = new Sprite;var topSide:Sprite = new Sprite;var maskRect:Rectangle;var matrix:Matrix, matrix2:Matrix;var maskOrigin:Point;var useShine:Boolean = false;var useShadow:Boolean = true;topSide.addChild(stickerTop);topSide.addChild(topMask), topMask.alpha = 0;topSide.addChild(shadow), shadow.blendMode = BlendMode.MULTIPLY;topSide.addChild(shadowMask);addChild(topSide);bottomSide.addChild(stickerBottom);bottomSide.addChild(bottomMask);bottomSide.addChild(shine), shine.blendMode = BlendMode.SCREEN;bottomSide.addChild(shineMask);addChild(bottomSide);shine.visible = useShine;shine.mask = (useShine ? shineMask : null);shineMask.visible = useShine;function update(axis:DisplayObject):void {	maskRect = stickerTop.getBounds(axis);	maskRect.x -= FAT, maskRect.y -= FAT;	maskRect.width += 2 * FAT, maskRect.height += 2 * FAT;	topSide.visible = (maskRect.x <= 0);	maskRect.width = Math.max(maskRect.width + maskRect.x, 0);	maskRect.x = 0;	if (maskRect.width > 0) {		bottomSide.visible = true;		matrix = stickerTop.transform.matrix.clone();		matrix2 = axis.transform.matrix.clone();		matrix2.invert();		matrix.concat(matrix2);		matrix.a *= -1;		matrix.c *= -1;		matrix.tx *= -1;		matrix.concat(axis.transform.matrix);		shineMask.transform.matrix = stickerBottom.transform.matrix = matrix;	} else {		bottomSide.visible = false;	}	if (useShine || bottomSide.visible && topSide.visible) {		maskOrigin = globalToLocal(axis.localToGlobal(maskRect.topLeft));		shine.rotation = shadow.rotation = bottomMask.rotation = topMask.rotation = 0;		shine.width  = shadow.width  = bottomMask.width  = topMask.width  = maskRect.width;		shine.height = shadow.height = bottomMask.height = topMask.height = maskRect.height;		bottomMask.scaleX *= -1, shadow.scaleX *= -1, shine.scaleX *= -1;		shine.x = shadow.x = bottomMask.x = topMask.x = maskOrigin.x;		shine.y = shadow.y = bottomMask.y = topMask.y = maskOrigin.y;		shine.rotation = shadow.rotation = bottomMask.rotation = topMask.rotation = axis.rotation;		showMasks();	} else {		hideMasks();	}}function showMasks():void {	if (!stickerBottom.mask) {		topSide.blendMode = BlendMode.LAYER;		topMask.blendMode = BlendMode.ALPHA;		stickerBottom.mask = bottomMask;		bottomMask.visible = topMask.visible = true;		if (useShadow) {			shadow.visible = true;			shadow.mask = shadowMask;			shadowMask.visible = true;		}	}}function hideMasks():void {	if (stickerBottom.mask) {		topSide.blendMode = BlendMode.NORMAL;		topMask.blendMode = BlendMode.NORMAL;		stickerBottom.mask = null;		bottomMask.visible = topMask.visible = false;		if (useShadow) {			shadow.visible = false;			shadow.mask = null;			shadowMask.visible = false;		}	}}////////////////////////////////////////////////////////////////////////////////////////////////var target:Object;var marker:Marker = new Marker;addChild(marker);marker.center.addEventListener(MouseEvent.MOUSE_DOWN, beginDrag);marker.pointer.addEventListener(MouseEvent.MOUSE_DOWN, beginDrag);stage.addEventListener(MouseEvent.MOUSE_UP, endDrag);shadowMask.x = stickerTop.x = stage.stageWidth / 2;shadowMask.y = stickerTop.y = stage.stageHeight / 2;marker.x = stickerTop.x + 175, marker.y = stickerTop.y + 100, marker.rotation = 100;updateSticker();function beginDrag(event:Event):void {	target = event.currentTarget;	stage.addEventListener(MouseEvent.MOUSE_MOVE, updateSticker);}function endDrag(event:Event):void {	target = null;	stage.removeEventListener(MouseEvent.MOUSE_MOVE, updateSticker);}function updateSticker(event:Event = null):void {	if (target == marker.center) {		marker.x = mouseX;		marker.y = mouseY;	} else if (target == marker.pointer) {		marker.rotation = Math.atan2(mouseY - marker.y, mouseX - marker.x) * 180 / Math.PI;	}	update(marker);}