const FAT:Number = 10;var st = new SwirlTop, sb = new SwirlBottom;var stMask = new Mask, sbMask = new Mask;var marker = new Marker, target, lastX, lastY;var bottom = new Sprite, top = new Sprite;//st.mask = stMask;sb.mask = sbMask;st.x = stage.stageWidth / 2, st.y = stage.stageHeight / 2;marker.x = st.x, marker.y = st.y - 100;addChild(top);addChild(bottom);top.blendMode = BlendMode.LAYER;stMask.alpha = 0;stMask.blendMode = BlendMode.ALPHA;top.addChild(st);top.addChild(stMask);bottom.addChild(sb);bottom.addChild(sbMask);addChild(marker);sb.mouseEnabled = sbMask.mouseEnabled = stMask.mouseEnabled = false;marker.center.addEventListener("mouseDown", beginDrag);marker.pointer.addEventListener("mouseDown", beginDrag);st.addEventListener("mouseDown", beginDrag);stage.addEventListener("mouseUp", endDrag);update();function beginDrag(e) {	target = e.currentTarget;	stage.addEventListener("mouseMove", update);}function endDrag(e) {	target = null;	stage.removeEventListener("mouseMove", update);}function update(e = null) {		if (target == marker.center) {		marker.x = mouseX;		marker.y = mouseY;	} else if (target == marker.pointer) {		marker.rotation = Math.atan2(mouseY - marker.y, mouseX - marker.x) * 180 / Math.PI;	} else if (target == st) {		st.rotation = Math.atan2(mouseY - st.y, mouseX - st.x) * 180 / Math.PI;	}		sbMask.rotation = stMask.rotation = 0;		var bounds:Rectangle = st.getBounds(marker);	bounds.x -= FAT, bounds.y -= FAT;	bounds.width += 2 * FAT, bounds.height += 2 * FAT;	bounds.width = Math.max(bounds.width + bounds.x, 0);	bounds.x = 0;		var topLeft:Point = this.globalToLocal(marker.localToGlobal(bounds.topLeft));		sbMask.width  = stMask.width  = bounds.width;	sbMask.height = stMask.height = bounds.height;	sbMask.scaleX *= -1;	sbMask.x = stMask.x = topLeft.x, sbMask.y = stMask.y = topLeft.y;	sbMask.rotation = stMask.rotation = marker.rotation;		with (graphics) {		clear();		lineStyle(0, 0xFFFFFF);		moveTo(marker.x, marker.y);		lineTo(topLeft.x, topLeft.y);	}		var mat, mat2;		mat = st.transform.matrix.clone();	mat2 = marker.transform.matrix.clone();	mat2.invert();	mat.concat(mat2);	mat.a *= -1;	mat.c *= -1;	mat.tx *= -1;	mat.concat(marker.transform.matrix);	sb.transform.matrix = mat;}