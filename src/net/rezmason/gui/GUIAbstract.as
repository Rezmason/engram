package net.rezmason.gui {		// IMPORT STATEMENTS	import flash.display.DisplayObject;	import flash.utils.getQualifiedClassName;		import net.rezmason.display.ColorSprite;	public class GUIAbstract extends ColorSprite {				// CLASS PROPERTIES		protected static const ENFORCER:GUIAbstractEnforcer = GUIAbstractEnforcer.INSTANCE;				// INSTANCE PROPERTIES		protected var expectedChildren:Object;		protected var _enabled:Boolean = true;						public function GUIAbstract(enf:Object):void {						expectedChildren ||= {};						if (enf != ENFORCER) {				throw new ArgumentError("You do not instantiate this class; it is abstract.");			}		}				// GETTERS & SETTERS				public function get enabled():Boolean {			return _enabled;		}				public function set enabled(value:Boolean):void {			_enabled = value;						mouseChildren = mouseEnabled = _enabled;						if (!_enabled) {				GUIManager.disableAbstract(this);			} else {				GUIManager.enableAbstract(this);			}		}				override public function getChildByName(value:String):DisplayObject {			var returnVal:DisplayObject = super.getChildByName(value);			if (returnVal != null) {				return returnVal;			} else if (value.indexOf("***") == 0) {				value = value.substr(3);				var upperValue:String = value.charAt(0).toUpperCase + value.substr(1);				for (var ike:int = 0; ike < numChildren; ike++) {					var childName:String = getChildAt(ike).name;					if (childName.indexOf(value) != -1) {						return getChildAt(ike);					} else if (childName.indexOf(upperValue) != -1) {						return getChildAt(ike);					}				}			}			return null;		}				// PRIVATE & PROTECTED METHODS				protected final function verifyChildren(obj:*):void {			var dataType:String  = getQualifiedClassName(obj);			if (expectedChildren) {				for (var prop:String in expectedChildren) {					if (!(getChildByName(prop) is expectedChildren[prop])) {						trace(":(", prop, "missing from", obj.name, ":", dataType);						throw new GUIError(dataType, prop, getQualifiedClassName(expectedChildren[prop]));					}				}			}		}	}}