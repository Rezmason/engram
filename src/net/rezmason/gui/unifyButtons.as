package net.rezmason.gui {		// IMPORT STATEMENTS	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.MouseEvent;		public function unifyButtons(target:DisplayObjectContainer, recursive:Boolean = false):void {		target.addEventListener(MouseEvent.ROLL_OVER, mouseResponder);		target.addEventListener(MouseEvent.ROLL_OUT, mouseResponder);		target.addEventListener(MouseEvent.MOUSE_DOWN, mouseResponder);		target.addEventListener(MouseEvent.MOUSE_UP, mouseResponder);		var _mouseIsDown:Boolean = false;		var _stage:Stage;		var upStates:Object = {}, overStates:Object = {}, downStates:Object = {};		var states:Object,buttons:Object = {};				var containers:Array = [target];		for (var ike:int = 0; ike < containers.length; ike++) {			for (var jen:int = 0; jen < containers[ike].numChildren; jen++) {				var button:SimpleButton = containers[ike].getChildAt(jen) as SimpleButton;				if (button) {					with (button) {						upStates[name] = upState;						overStates[name] = overState;						downStates[name] = downState;					}					buttons[button.name] = button;				} else if (recursive && containers[ike].getChildAt(jen) is DisplayObjectContainer) {					containers.push(containers[ike].getChildAt(jen));				}			}		}		function mouseResponder(event:MouseEvent):void {			switch (event.type) {				case MouseEvent.ROLL_OVER :					if (_mouseIsDown) {						states = downStates;					} else {						states = overStates;					}					break;				case MouseEvent.ROLL_OUT :					if (_mouseIsDown) {						states = overStates;					} else {						states = upStates;					}					break;				case MouseEvent.MOUSE_DOWN :					if (_mouseIsDown == false && target.stage != null) {						_stage = target.stage;						_stage.addEventListener(MouseEvent.MOUSE_UP, mouseResponder);					}					_mouseIsDown = true;					states = downStates;					break;				case MouseEvent.MOUSE_UP :					_mouseIsDown = false;					if (_stage) {						_stage.removeEventListener(MouseEvent.MOUSE_UP, mouseResponder);					}					if (event.target != target && ! target.contains(event.target as DisplayObject)) {						_stage = null;						states = upStates;					} else {						states = overStates;					}					break;			}			for (var prop:String in buttons) {				buttons[prop].upState = states[buttons[prop].name];			}		}	}}