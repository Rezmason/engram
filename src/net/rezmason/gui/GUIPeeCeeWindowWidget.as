package net.rezmason.gui {		// IMPORT STATEMENTS	import flash.display.InteractiveObject;	import flash.events.Event;	import flash.events.MouseEvent;		public class GUIPeeCeeWindowWidget extends GUIWindowWidget {				// INSTANCE PROPERTIES		protected var _reduceImage:InteractiveObject;		protected var _maximizeImage:InteractiveObject;				public function GUIPeeCeeWindowWidget():void {					_maximizeImage = getChildByName("maximizeImage") as InteractiveObject;			_reduceImage = getChildByName("reduceImage") as InteractiveObject;						_reduceImage.visible = false;			_reduceImage.y = _maximizeImage.y;			_reduceImage.mouseEnabled = false;			_maximizeImage.mouseEnabled = false;			expectedChildren = {};			expectedChildren["windowCloseButton"] = InteractiveObject;			expectedChildren["windowMinimizeButton"] = InteractiveObject;			expectedChildren["windowMaximizeButton"] = InteractiveObject;			expectedChildren["windowPauseButton"] = InteractiveObject;			super();			closeButton = getChildByName("windowCloseButton") as InteractiveObject;			minimizeButton = getChildByName("windowMinimizeButton") as InteractiveObject;			maximizeButton = getChildByName("windowMaximizeButton") as InteractiveObject;			pauseButton = getChildByName("windowPauseButton") as InteractiveObject;						maximizeButton.addEventListener(MouseEvent.CLICK, swapMaximizeImages);		}				// GETTERS & SETTERS				override public function set offset(value:Number):void {			super.offset = value;						if (_stage) {				x = _stage.stageWidth - _offset;				y = _offset;			}		}				// PRIVATE METHODS				override protected function grabStage(event:Event = null):void {			super.grabStage();						if (_stage) {				x = _stage.stageWidth - _offset;				y = _offset;			}		}				public function swapMaximizeImages(event:MouseEvent):void {			if (_reduceImage.visible) {				_reduceImage.visible = false;				_maximizeImage.visible = true;			} else {				_reduceImage.visible = true;				_maximizeImage.visible = false;			}		}	}}