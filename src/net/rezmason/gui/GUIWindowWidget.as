package net.rezmason.gui {		// IMPORT STATEMENTS	import flash.display.InteractiveObject;	import flash.display.SimpleButton;	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;			public class GUIWindowWidget extends GUIAbstract {				//  CLASS PROPERTIES & CONSTANTS				// PRIVATE INSTANCE PROPERTIES		private static const CLOSE_WINDOW_EVENT:GUIEvent = new GUIEvent(GUIEvent.CLOSE_WINDOW);		private static const MINIMIZE_WINDOW_EVENT:GUIEvent = new GUIEvent(GUIEvent.MINIMIZE_WINDOW);		private static const MAXIMIZE_WINDOW_EVENT:GUIEvent = new GUIEvent(GUIEvent.MAXIMIZE_WINDOW);		private static const SUSPEND_EVENT:GUIEvent = new GUIEvent(GUIEvent.SUSPEND);		protected var _closeButton:InteractiveObject;		protected var _minimizeButton:InteractiveObject;		protected var _maximizeButton:InteractiveObject;		protected var _pauseButton:InteractiveObject;		protected var _offset:int;		protected var _stage:Stage;		private var uiManager:GUIManager;				// CONSTRUCTOR		public function GUIWindowWidget():void {			super(GUIAbstractEnforcer.INSTANCE);			uiManager = GUIManager.INSTANCE;						var ike:int;			for (ike = 0; ike < numChildren; ike += 1) {				if (getChildAt(ike) is InteractiveObject && !(getChildAt(ike) is SimpleButton)) {					(getChildAt(ike) as InteractiveObject).mouseEnabled = false;				}			}						if (stage) {				grabStage();			} else {				addEventListener(Event.ADDED_TO_STAGE, grabStage);			}		}				// GETTERS & SETTERS				public final function get offset():Number{			return _offset;		}				public function set offset(value:Number):void {			_offset = Math.max(0, value);		}				// PUBLIC METHODS				public function init():void {						if (_closeButton) {				addColorChild(_closeButton);				_closeButton.addEventListener(MouseEvent.CLICK, closeWindow);			}						if (_minimizeButton) {				addColorChild(_minimizeButton);				_minimizeButton.addEventListener(MouseEvent.CLICK, minimizeWindow);			}						if (_maximizeButton) {				addColorChild(_maximizeButton);				_maximizeButton.addEventListener(MouseEvent.CLICK, maximizeWindow);			}						if (_pauseButton) {				addColorChild(_pauseButton);				_pauseButton.addEventListener(MouseEvent.CLICK, suspend);			}		}				// PRIVATE & PROTECTED METHODS				protected function grabStage(event:Event = null):void {			removeEventListener(Event.ADDED_TO_STAGE, grabStage);			_stage = stage;		}				private final function closeWindow(event:MouseEvent):void {			// do closing stuff			dispatchEvent(CLOSE_WINDOW_EVENT);			uiManager.close();		}				private final function minimizeWindow(event:MouseEvent):void {			// do minimizing stuff			SUSPEND_EVENT.suspendImmediately = true;			dispatchEvent(SUSPEND_EVENT);			dispatchEvent(MINIMIZE_WINDOW_EVENT);			uiManager.minimize();		}				private final function maximizeWindow(event:MouseEvent):void {			// do maximizing stuff			SUSPEND_EVENT.suspendImmediately = true;			dispatchEvent(SUSPEND_EVENT);			dispatchEvent(MAXIMIZE_WINDOW_EVENT);			uiManager.toggleFullScreen();		}				private final function suspend(event:MouseEvent):void {			// do pausing stuff			SUSPEND_EVENT.suspendImmediately = false;			dispatchEvent(SUSPEND_EVENT);		}	}}