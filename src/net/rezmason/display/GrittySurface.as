package net.rezmason.display {		// IMPORT STATEMENTS	import flash.display.BlendMode;	import flash.display.BitmapData;	import flash.display.GradientType;	import flash.display.Shape;	import flash.filters.ColorMatrixFilter;	import flash.geom.Matrix;		public class GrittySurface extends Applicator {				//  CLASS PROPERTIES		private static const NOISE_FILTER:ColorMatrixFilter = new ColorMatrixFilter([		 0,0,0,0,255,		 0,0,0,0,255,		 0,0,0,0,255,		-2,0,0,0,300,		]);				// INSTANCE PROPERTIES		private var glimmerMatrix:Matrix = new Matrix;		private var shadeMatrix:Matrix = new Matrix;		private var noiseTexture:BitmapData;		private var noiseMask:Shape = new Shape;		private var shade:Shape = new Shape;				private var scratch:Number;		private var lastRatio:Number = 1;				// CONSTRUCTOR		public function GrittySurface(w:int = AUTO, h:int = AUTO):void {			super(w, h);		}				// PRIVATE & PROTECTED METHODS				override protected function redrawTexture():void {			noiseTexture = new BitmapData(_width, _height, true, 0x00000000);						// shade: linear dark gradient			shadeMatrix.createGradientBox(_width * 1.4, _height * 0.8, 90, _width * (1 - 1.4) / 2, _height * (1 - 0.8) / 2);			with (shade.graphics) {				clear();				beginGradientFill(GradientType.LINEAR, [0xFFFFFF,0xFFFFFF], [0.6, 0], [0, 255], shadeMatrix);				drawRect(0, 0, _width, _height);				endFill();			}			// noiseMask: radial gradient that dulls noise			glimmerMatrix.createGradientBox(_width * 1.6, _height * 0.8, 0, _width * (1 - 1.6) / 2, _height * (1 - 0.8) / 2);			with (noiseMask.graphics) {				clear();				beginGradientFill(GradientType.RADIAL, [0xFFFFFF,0xFFFFFF], [0.6,0.1], [64,255], glimmerMatrix);				drawRect(0, 0, _width, _height);				endFill();			}			//noise: gritty darkening			noiseTexture.noise(Math.random() * 0xFFFFFFFF, 32, 128, 1);			noiseTexture.draw(noiseMask);			noiseTexture.applyFilter(noiseTexture, noiseTexture.rect, noiseTexture.rect.topLeft, NOISE_FILTER);			// sandwich everything			output.draw(shade, null, null, BlendMode.NORMAL);			output.draw(noiseTexture, null, null, BlendMode.LIGHTEN);						super.redrawTexture();		}	}}