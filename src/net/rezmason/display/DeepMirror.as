package net.rezmason.display {		// IMPORT STATEMENTS	import flash.display.Shape;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.geom.Matrix;		/**	*	Applicator that draws its stage as a texture.	*	<p>Intended to be thought-provokingly stupid.</p>	*	<p>This texture is opaque.</p>	*		*	@author Jeremy Sachs	*	@langversion	ActionScript 3.0	*	@playerversion	Flash 9	*	@tiptext	*/	public class DeepMirror extends Applicator {				// INSTANCE PROPERTIES		private var arrow:Shape = new Shape();				/**		*	Creates a new DeepMirror instance.		*			*	<p>If either of the first two parameters are unspecified,		*	the DeepMirror automatically applies its texture		*	to its contents, effectively masking them.</p>		*		*	@param	w	 The desired width of the DeepMirror.		*	@param	h	 The desired height of the DeepMirror.		*	@param	index	 The color palette index of the applied texture.		*/		public function DeepMirror(w:int = AUTO, h:int = AUTO, index:int = 0xFF):void {			super(w, h, true, index);			addEventListener(Event.ADDED_TO_STAGE, startUpdating);			addEventListener(Event.REMOVED_FROM_STAGE, stopUpdating);						with (arrow.graphics) {				lineStyle(0, 0xFFFFFF);				beginFill(0x000000);				moveTo(0, 0);				lineTo(36, 60);				lineTo(60, 36);				lineTo(0, 0);			}		}				// PRIVATE & PROTECTED METHODS				override protected function rethinkTexture():void {					}				override protected function redrawTexture():void {			if (stage && stage.displayState == StageDisplayState.NORMAL) {				var matrix:Matrix = new Matrix(_width / stage.stageWidth, 0, 0, _height / stage.stageHeight);				output.draw(stage, matrix);				matrix.tx = stage.mouseX * matrix.a;				matrix.ty = stage.mouseY * matrix.d;				output.draw(arrow, matrix);			}				super.redrawTexture();		}				private function startUpdating(event:Event):void {			addEventListener(Event.ENTER_FRAME, update);		}				private function stopUpdating(event:Event):void {			removeEventListener(Event.ENTER_FRAME, update);		}				private function update(event:Event):void {			rethinkTexture();			redrawTexture();		}	}}