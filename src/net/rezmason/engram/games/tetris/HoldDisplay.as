package net.rezmason.engram.games.tetris {		// IMPORT STATEMENTS	import flash.display.Sprite;	import flash.geom.ColorTransform;		import gs.TweenLite;	import com.robertpenner.easing.Quintic;	import net.rezmason.display.ColorSprite;		internal final class HoldDisplay extends ColorSprite {				// INSTANCE PROPERTIES		private const HOLD_PIECES:Array = [HoldPiece0, HoldPiece1, HoldPiece2, HoldPiece3, HoldPiece4, HoldPiece5, HoldPiece6 ];				private var holdLock:Boolean = false;		private var currentClass:Class;		private var holdCT:ColorTransform = new ColorTransform();		private var holdSprite:Sprite;		private var container:Sprite = new Sprite;		private var tweenToObject:Object = {			ease:Quintic.easeOut, 			delay:0, 			x:"64"		};		private var colorTweenToObject:Object = {			ease:Quintic.easeInOut, 			delay:0, 			onUpdate:updateColor, 			onComplete:updateColor, 			value:1		};		private var colorTweenObject:Object = {val:0};						public function HoldDisplay():void {			addChild(container);			addColorChild(container, 1);		}				// INTERNAL METHODS				internal function init():void {			var ike:int;						for (ike = 0; ike < HOLD_PIECES.length; ike += 1) {				currentClass = HOLD_PIECES[ike];				HOLD_PIECES[ike] = new currentClass();			}		}				internal function reset():void {			if (holdSprite) {				container.removeChild(holdSprite);				holdSprite = null;			}			holdLock = false;		}				internal function update(holdPiece:int):void {						if (holdSprite) {				container.removeChild(holdSprite);			}						holdSprite = HOLD_PIECES[holdPiece];			holdCT.redMultiplier = holdCT.greenMultiplier = holdCT.blueMultiplier = 0;			holdSprite.transform.colorTransform = holdCT;			holdSprite.scaleX = holdSprite.scaleY = 1.4;			container.addChild(holdSprite);						TweenLite.killTweensOf(this, true);			TweenLite.from(this, 0.4, tweenToObject);						holdLock = true;		}				internal function mature():void {			if (holdSprite && holdLock) {				colorTweenObject.value = 0;				TweenLite.killTweensOf(this, true);				TweenLite.to(colorTweenObject, 0.4, colorTweenToObject);							holdLock = false;			}		}				// PRIVATE & PROTECTED METHODS				private function updateColor():void {			holdSprite.scaleY = holdSprite.scaleX = 1.4 + (0.6 * colorTweenObject.value);			holdCT.redMultiplier = holdCT.greenMultiplier = holdCT.blueMultiplier = colorTweenObject.value;			holdSprite.transform.colorTransform = holdCT;		}	}}