package net.rezmason.engram.games.busybodhi {		// IMPORT STATEMENTS	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.getTimer;	import flash.utils.Timer;		import net.rezmason.engram.modules.Game;	import net.rezmason.engram.modules.GameModule;	import net.rezmason.engram.modules.GameType;	import net.rezmason.engram.modules.ModuleKeyRoles;	import net.rezmason.engram.modules.ModuleView;	import net.rezmason.media.SoundManager;			public final class BusyBodhi extends GameModule {				// CLASS PROPERTIES				// INSTANCE PROPERTIES		private var _bbGame:BBGame = new BBGame;		private var _bbView:BBView = new BBView(_bbGame);		private var _bbSettingsView:BBSettingsView = new BBSettingsView(_bbGame);				private var _alive:Boolean = false;		private var soundManager:SoundManager = SoundManager.INSTANCE;		private var gameTimer:Timer = new Timer(10);		private var repeatInputTimer:Timer = new Timer(200);		private var windowTimer:Timer = new Timer(1000, 1);		private var window:int = 500;		private var lastTime:int;		private var shortTypeMap:Object;				public function BusyBodhi():void {						shortTypeMap = {				(ModuleKeyRoles.AKEY as String):"a",				(ModuleKeyRoles.BKEY as String):"b",				(ModuleKeyRoles.XKEY as String):"x",				(ModuleKeyRoles.YKEY as String):"y"			}						_defaultSettings["Example"] = true;						_game = _bbGame as Game;			_view = _bbView as ModuleView;			_settingsView = _bbSettingsView as ModuleView;						addColorChild(_view);						_title = "BusyBodhi";			_version = "1.0";			_author = "Rezmason";						_sounds.highFlickSound = new HighFlickSound, _channels.highFlickSound = 1;			_sounds.flickSound = new FlickSound, _channels.flickSound = 1;						_icon = new GameIcon;						_game.addEventListener(BBEvent.TURNING_POINT, trace);						loaderInfo.addEventListener(Event.INIT, initComplex, false, 0, true);			repeatInputTimer.addEventListener(TimerEvent.TIMER, repeatInput);			gameTimer.addEventListener(TimerEvent.TIMER, updateGame);			windowTimer.addEventListener(TimerEvent.TIMER_COMPLETE, cancelSlowCombo);					}				// GETTERS & SETTERS				override public function get score():int {			return _bbGame.score;		}				// PUBLIC METHODS				override public function unlock():void {			super.unlock();		}				override public function reset(event:Event = null):void {			super.reset();			windowTimer.reset();			gameTimer.reset();			repeatInputTimer.reset();			repeatInputTimer.delay = 200;			_alive = false;		}				override public function resize(ratio:Number = 1, updateView:Boolean = false):void {			_bbView.resize(ratio);			if (updateView) {							}		}				override public function start(event:Event = null, gameType:String = null, debug:Boolean = false):void {						super.start();						gameTimer.start();			repeatInputTimer.start();						interpretSettings();						if (debug) {				_bbGame.debug();			}						_alive = true;			beginNewRound();						switch (_gameType) {				default :				case GameType.ARCADE :					trace("BB: ARCADE!");				break;				case GameType.STUDIO :					trace("BB: STUDIO!");				break;				case GameType.DRILL :					trace("BB: DRILL!");				break;			}		}				override public function pause(event:Event = null):void {			super.pause();			gameTimer.reset();			repeatInputTimer.reset();			_bbGame.cancelCombo();			_bbView.clearComboGlyphs();			windowTimer.reset();		}				override public function resume(event:Event = null):void {			super.resume();			gameTimer.start();			repeatInputTimer.start();			if (!_alive) {				_alive = true;				beginNewRound();			} else {							}		}				override public function end(event:Event = null):void {			super.end();			gameTimer.reset();			repeatInputTimer.reset();			_bbGame.cancelCombo();			_bbView.clearComboGlyphs();		}				// PRIVATE & PROTECTED METHODS				override protected function interpretSettings():void {			if (_settings["Example"] != undefined) {							}		}				override protected function handleKeyDown(inputType:String):void {			var time:int = getTimer();						windowTimer.reset();						var shortType:String = getShortType(inputType);			if (shortType != "") {				var beat:Beat = makeBeat();				beat.key = shortType;				beat.time = time - lastTime;				if (beat.time > 40) {					_bbGame.push(beat);					} else {					_bbGame.cancelCombo();					_bbView.clearComboGlyphs();				}								var matches:Array = _bbGame.findMatches();				if (matches.length == 0) {					_bbGame.cancelCombo();					_bbView.clearComboGlyphs();				} else if (matches.length == 1) {					var exactMatch:String = _bbGame.removeExactMatch(true);					if (exactMatch) {						_bbGame.cancelCombo();						_bbView.clearComboGlyphs(true);					}				} else {					windowTimer.start();					_bbView.updateComboGlyphs();				}								lastTime = time;			}		}				private function repeatInput(event:Event = null):void {			var _up:Boolean = false, _down:Boolean = false;			if (keys[ModuleKeyRoles.LKEY] || keys[ModuleKeyRoles.UKEY]) {				_up = true;			}			if (keys[ModuleKeyRoles.RKEY] || keys[ModuleKeyRoles.DKEY]) {				_down = true;			}						if (_up && !_down) {				_bbGame.bump(1);			} else if (_down && !_up) {				_bbGame.bump(-1);			}		}				private function updateGame(event:Event = null):void {			_bbGame.updateTracks();		}				private function cancelSlowCombo(event:Event):void {			_bbGame.cancelCombo();			_bbView.clearComboGlyphs();		}				private function initComplex(event:Event):void {			if (free) {				stage.focus = stage;								stage.addEventListener("keyDown", function(e:*):void { 					var val:String					switch (e.keyCode) {						case 90: val = ModuleKeyRoles.AKEY; break;						case 88: val = ModuleKeyRoles.BKEY; break;						case 65: val = ModuleKeyRoles.XKEY; break;						case 83: val = ModuleKeyRoles.YKEY; break;						default: _bbGame.debug(); break;					}					handleKeyDown(val); 				});								x = stage.stageWidth / 2;				y = stage.stageHeight / 2;				unlock();				reset();				start();			}		}				private function beginNewRound():void {			_bbGame.initialize();		}				private function makeBeat():Beat {			return new Beat();	// this can be smarter eventually		}				private function getShortType(inputType:String):String {			return shortTypeMap[inputType] == undefined ? "" : shortTypeMap[inputType];		}	}}