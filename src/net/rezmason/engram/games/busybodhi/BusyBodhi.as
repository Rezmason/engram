package net.rezmason.engram.games.busybodhi {		// IMPORT STATEMENTS	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.getTimer;	import flash.utils.Timer;		import net.rezmason.engram.modules.Game;	import net.rezmason.engram.modules.GameModule;	import net.rezmason.engram.modules.GameType;	import net.rezmason.engram.modules.ModuleEvent;	import net.rezmason.engram.modules.ModuleKeyRoles;	import net.rezmason.engram.modules.ModuleView;	import net.rezmason.media.SoundManager;			public final class BusyBodhi extends GameModule {				// CLASS PROPERTIES				// INSTANCE PROPERTIES		private var _bbGame:BBGame = new BBGame;		private var _bbView:BBView = new BBView(_bbGame);		private var _bbSettingsView:BBSettingsView = new BBSettingsView(_bbGame);				private var _alive:Boolean = false;		private var soundManager:SoundManager = SoundManager.INSTANCE;		private var gameTimer:Timer = new Timer(50);		private var windowTimer:Timer = new Timer(1000, 1);		private var window:int = 500;		private var lastTime:int;		private var shortTypeMap:Object;		private var presses:Array;				public function BusyBodhi():void {						shortTypeMap = {				(ModuleKeyRoles.AKEY as String):"a",				(ModuleKeyRoles.BKEY as String):"b",				(ModuleKeyRoles.XKEY as String):"x",				(ModuleKeyRoles.YKEY as String):"y"			}						_defaultSettings["Example"] = true;						_game = _bbGame as Game;			_view = _bbView as ModuleView;			_settingsView = _bbSettingsView as ModuleView;						addColorChild(_view);						_title = "BusyBodhi";			_version = "1.0";			_author = "Rezmason";						_sounds.highFlickSound = new HighFlickSound, _channels.highFlickSound = 1;			_sounds.flickSound = new FlickSound, _channels.flickSound = 1;						_icon = new GameIcon;						_bbGame.addEventListener(BBEvent.TURNING_POINT, trace);			_bbGame.addEventListener(BBEvent.TILES_TOUCHED, makeClickSound);			_bbGame.addEventListener(BBEvent.TRACK_SETTLED, makeClickSound);						loaderInfo.addEventListener(Event.INIT, initComplex, false, 0, true);			gameTimer.addEventListener(TimerEvent.TIMER, updateGame);			windowTimer.addEventListener(TimerEvent.TIMER_COMPLETE, _bbGame.cancelCombo);					}				// GETTERS & SETTERS				override public function get score():int {			return _bbGame.score;		}				// PUBLIC METHODS				override public function unlock():void {			super.unlock();		}				override public function reset(event:Event = null):void {			super.reset();			windowTimer.reset();			gameTimer.reset();			_alive = false;			presses = [];		}				override public function resize(ratio:Number = 1, updateView:Boolean = false):void {			_bbView.resize(ratio);			if (updateView) {							}		}				override public function start(event:Event = null, gameType:String = null, debug:Boolean = false):void {						super.start();						gameTimer.start();						interpretSettings();						if (debug) {				_bbGame.debug();			}						_alive = true;			beginNewRound();						switch (_gameType) {				default :				case GameType.ARCADE :					trace("BB: ARCADE!");				break;				case GameType.STUDIO :					trace("BB: STUDIO!");				break;				case GameType.DRILL :					trace("BB: DRILL!");				break;			}		}				override public function pause(event:Event = null):void {			super.pause();			gameTimer.reset();			_bbGame.cancelCombo();			windowTimer.reset();		}				override public function resume(event:Event = null):void {			super.resume();			gameTimer.start();			if (!_alive) {				_alive = true;				beginNewRound();			} else {							}		}				override public function end(event:Event = null):void {			super.end();			trace("GAME OVER");			gameTimer.reset();			_bbGame.cancelCombo();		}				// PRIVATE & PROTECTED METHODS				override protected function interpretSettings():void {			if (_settings["Example"] != undefined) {							}		}				override protected function handleKeyDown(inputType:String):void {			var time:int = getTimer();						if (!presses[inputType]) {					var shortType:String = getShortType(inputType);				if (shortType != "" && !presses[inputType]) {					windowTimer.reset();					if (time - lastTime > 40) {						var beat:Beat = makeBeat(shortType, time - lastTime);						windowTimer.start();						_bbGame.pushCombo(beat);					} else {						_bbGame.cancelCombo();					}					lastTime = time;				} else {					changeTrack();				}				presses[inputType] = true;			}		}				override protected function handleKeyUp(inputType:String):void {			presses[inputType] = false;		}				private function changeTrack(event:Event = null):void {			var _up:Boolean = false, _down:Boolean = false;						if (keys[ModuleKeyRoles.LKEY] || keys[ModuleKeyRoles.UKEY]) {				_up = true;			}						if (keys[ModuleKeyRoles.RKEY] || keys[ModuleKeyRoles.DKEY]) {				_down = true;			}						if (_up && !_down) {				_bbGame.bump(-1);				_bbView.updateArrow();			} else if (_down && !_up) {					_bbGame.bump(1);				_bbView.updateArrow();			}		}				private function updateGame(event:Event = null):void {			_bbGame.updateTracks();			//_bbView.updateTileSprites();		}				private function initComplex(event:Event):void {			if (free) {				stage.focus = stage;				stage.addEventListener(KeyboardEvent.KEY_DOWN, mediate);				stage.addEventListener(KeyboardEvent.KEY_UP, mediate);								_bbGame.addEventListener(ModuleEvent.PLAYER_FAIL, end);								x = stage.stageWidth / 2;				y = stage.stageHeight / 2;								var centerpiece:Rectangle = _bbView.centerpiece as Rectangle;				with (graphics) {					lineStyle(0, 0xFFFF00);					drawRect(centerpiece.x, centerpiece.y, centerpiece.width, centerpiece.height);				}				x -= centerpiece.x + centerpiece.width / 2;				y -= centerpiece.y + centerpiece.height / 2;								unlock();				reset();				start();			}		}				private function mediate(event:KeyboardEvent):void {			var val:String;			switch (event.keyCode) {				case 90: val = ModuleKeyRoles.AKEY; break;				case 88: val = ModuleKeyRoles.BKEY; break;				case 65: val = ModuleKeyRoles.XKEY; break;				case 83: val = ModuleKeyRoles.YKEY; break;				case 38: val = ModuleKeyRoles.UKEY; break;				case 40: val = ModuleKeyRoles.DKEY; break;				case 37: val = ModuleKeyRoles.LKEY; break;				case 39: val = ModuleKeyRoles.RKEY; break;				default: _bbGame.debug(); break;			}			if (val) {				handleInput(val, (event.type == KeyboardEvent.KEY_DOWN));			} else if (event.type == KeyboardEvent.KEY_DOWN) {				trace(event.keyCode);				switch (event.keyCode) {					case 78: _bbGame.addTrack(); break;					case 77: 						if (_bbGame.numTracks > 1) {							_bbGame.removeTrack(0);						} else {							_bbGame.gameOver();						}						break;				}			}		}				private function beginNewRound():void {			_bbGame.initialize();		}				private function makeBeat(__key:String = "", __time:int = 0):Beat {			return new Beat(__key, __time);	// this can be smarter eventually		}				private function getShortType(inputType:String):String {			return shortTypeMap[inputType] == undefined ? "" : shortTypeMap[inputType];		}				private function makeClickSound(event:Event):void {			trace("clink!");			//soundManager.play("clickingTileSound");		}	}}