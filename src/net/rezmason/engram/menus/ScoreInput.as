package net.rezmason.engram.menus {		// IMPORT STATEMENTS	import flash.display.Stage;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.ui.Keyboard;		import net.rezmason.engram.CommonSignals;	import net.rezmason.gui.GUIButton;	import net.rezmason.media.SoundManager;	import net.rezmason.utils.keyboardEventToString;		public final class ScoreInput extends MenuBase {				// CLASS PROPERTIES		private static const WOOHAHS:Array = ["YEAH BABY", "BOOYAH", "ZING", "OH SNAP", "HALLELUJAH"];				// INSTANCE PROPERTIES		private var _listening:Boolean = false;		private var soundManager:SoundManager = SoundManager.INSTANCE;		private var _stage:Stage;						public function ScoreInput():void {						buttonMap = {				btnCancel: CommonSignals.SHOW_MAIN_MENU			};						mapButtons();						btnEnter.addEventListener(MouseEvent.CLICK, showInput);			btnAccept.addEventListener(MouseEvent.CLICK, checkText);			//nameInput.txtName.addEventListener(TextEvent.TEXT_INPUT, playTypeSound);						if (stage) {				addStageListeners();			} else {				addEventListener(Event.ADDED_TO_STAGE, addStageListeners);			}						_defaultNo = btnCancel;						btnCancel.text = "WHATEVER";			btnEnter.text = "SWEET";		}				// GETTERS & SETTERS				override public function get listening():Boolean {			return _listening;		}				override public function get defaultYes():GUIButton {			return (btnAccept.visible ? btnAccept : btnEnter);		}				// PUBLIC METHODS				override public function prepare(...args):void {			btnAccept.text = WOOHAHS[int(Math.random() * WOOHAHS.length)];			btnAccept.visible = false;			btnEnter.visible = true;			nameInput.visible = false;		}				public function checkText(event:MouseEvent):void {			if (nameInput.txtName.text.length) {				_stage.focus = _stage;				_listening = false;				addScore();			}		}				// PRIVATE & PROTECTED METHODS				private function addStageListeners(event:Event = null):void {			removeEventListener(Event.ADDED_TO_STAGE, addStageListeners);			_stage = stage;			stage.addEventListener(KeyboardEvent.KEY_DOWN, typeResponder, false, 0, true);;			stage.addEventListener(KeyboardEvent.KEY_UP, typeResponder, false, 0, true);;		}				private function showInput(event:MouseEvent):void {			_listening = true;			btnAccept.visible = true;			btnEnter.visible = false;			nameInput.visible = true;			nameInput.txtName.text = "";		}				private function typeResponder(event:KeyboardEvent):void {						if (!_listening) {				return;			}						var str:String = keyboardEventToString(event);			var currentText:String = nameInput.txtName.text;						if (event.type == KeyboardEvent.KEY_UP) {				if (event.keyCode == Keyboard.ESCAPE) {					btnAccept.visible = false;					btnEnter.visible = true;					nameInput.visible = false;					_listening = false;				}			} else if (event.keyCode == Keyboard.ENTER) {				soundManager.play("typePunkaSound");				btnAccept.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			} else if (event.keyCode == Keyboard.BACKSPACE) {				nameInput.txtName.text = currentText.substr(0, currentText.length - 1);				if (currentText.length) {					soundManager.play("typePunkaSound");				}			} else if (str && str.length == 1){				nameInput.txtName.text = currentText + String.fromCharCode(event.charCode);				var rand:int = int(Math.random() * 3);				switch (rand) {					case 0:						soundManager.play("typeTakSound");					break;					case 1:						soundManager.play("typeTakaSound");					break;					case 2:					default:						soundManager.play("typeTikaSound");					break;				}			}		}				private function addScore(event:Event = null):void {			_command.param = nameInput.txtName.text;			signal(null, CommonSignals.ADD_SCORE);		}	}}