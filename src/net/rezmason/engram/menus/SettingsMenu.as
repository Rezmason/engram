package net.rezmason.engram.menus {		// IMPORT STATEMENTS	import flash.display.InteractiveObject;	import flash.events.Event;	import flash.events.MouseEvent;		import net.rezmason.display.DisplayObjectSlider;	import net.rezmason.engram.CommonSignals;	import net.rezmason.engram.SettingsManager;	import net.rezmason.gui.GUIGroup;	import net.rezmason.gui.GUITab;		import com.robertpenner.easing.Quartic;		public final class SettingsMenu extends MenuBase {				// INSTANCE PROPERTIES		private var _options:Object;				private var submenus:Object;		private var currentMenuIndex:int = 0;		private var tabs:Array;		private var keySubmenuBase:KeySubmenu;		private var imageSubmenuBase:ImageSubmenu;		private var soundSubmenuBase:SoundSubmenu;		private var moduleSubmenuBase:ModuleSubmenu;		private var resetSubmenuBase:ResetSubmenu;		private var loaders:Array;				private var settingsManager:SettingsManager = SettingsManager.INSTANCE;				private var slider:DisplayObjectSlider = new DisplayObjectSlider(500);		private var tabGroup:GUIGroup = new GUIGroup;						public function SettingsMenu():void {						keySubmenuBase = new KeySubmenu(this);			imageSubmenuBase = new ImageSubmenu(this);			soundSubmenuBase = new SoundSubmenu(this);			moduleSubmenuBase = new ModuleSubmenu(this);			resetSubmenuBase = new ResetSubmenu(this);						addChild(slider);			slider.addEventListener(Event.COMPLETE, finishSlide);						_defaultYes = null;			_defaultNo = btnReturn;						addColorChild(tabBar);						submenus = {				tbKeys:keySubmenuBase,				tbImage:imageSubmenuBase,				tbSound:soundSubmenuBase,				tbModules:moduleSubmenuBase,				tbReset:resetSubmenuBase			};						var prop:String;			for (prop in submenus) {				addColorChild(submenus[prop]);			}						tabs = [tbKeys, tbImage, tbSound, tbModules, tbReset];			tabs.forEach(initTab);			tabGroup.defaultOption = tbKeys;			tabGroup.mode = GUIGroup.PASSIVE;						btnReturn.addEventListener(MouseEvent.CLICK, goBack);						keySubmenuBase.keyPairs = settingsManager.keyPairs;			keySubmenuBase.syncKeys();						_options = settingsManager.options;		}				// GETTERS & SETTERS				override public function get listening():Boolean {			return keySubmenuBase.listening;		}				internal function get options():Object {			return _options;		}				// PUBLIC METHODS				override public function prepare(...args):void {			if (args.length) {				moduleSubmenuBase.list = args[0];			}			swapTabs(null, keySubmenuBase);			tbKeys.chosen = true;		}				override public function rerez(ratio:Number = 1):void {			for (var prop:String in submenus) {				submenus[prop].rerez(ratio);			}		}				// INTERNAL METHODS				internal function defaultKeys():void {			settingsManager.defaultKeys();			keySubmenuBase.keyPairs = settingsManager.keyPairs;		}				internal function applySettings(event:Event = null):void {			settingsManager.keyPairs = keySubmenuBase.keyPairs;			settingsManager.options = _options;			signal(null, CommonSignals.SETTINGS_UPDATED);		}				// PRIVATE & PROTECTED METHODS				private function enableMouse(event:Event = null):void {			mouseEnabled = mouseChildren = true;		}				private function disableMouse(event:Event = null):void {			mouseEnabled = mouseChildren = false;		}				private function initTab(target:GUITab, index:int, arr:Array):void {			tabGroup.addGUIAbstract(target);			target.addEventListener(Event.CHANGE, swapTabs);		}				private function swapTabs(event:Event = null, incomingSubmenuBase:SubmenuBase = null):void {						var speed:Number = 0;			var nextTab:GUITab;						if (event) {								if (!validate(event)) {					trace("Current menu failed.");					return;				}								trace("Current menu checked out.");								nextTab = event.currentTarget as GUITab;								speed = 1;			} else {				var prop:String;				for (prop in submenus) {					if (submenus[prop] == incomingSubmenuBase) {						nextTab = getChildByName(prop) as GUITab;						break;					}				}			}						tabGroup.chosenOption = nextTab;						if (!incomingSubmenuBase) {				var menuName:String = tabGroup.chosenOption.name;				if (slider.currentSubject == submenus[menuName]) {					return;				}				incomingSubmenuBase = submenus[menuName];			}						if (speed) {				disableMouse();			}						var nextMenuIndex:int = tabs.indexOf(nextTab);			var angle:Number = nextMenuIndex < currentMenuIndex ? 180 : 0;			currentMenuIndex = nextMenuIndex;						slider.show(incomingSubmenuBase, incomingSubmenuBase.standIn, speed, Quartic.easeInOut, angle);			txtDescription.text = incomingSubmenuBase.description.toUpperCase();		}				private function finishSlide(event:Event):void {			enableMouse();			(slider.currentSubject as SubmenuBase).trigger();		}				private function goBack(event:Event):void {			if (validate(event)) {				_command.flavor = CommonSignals.SHOW_LAST;				dispatchEvent(_command);			}		}				private function validate(event:Event):Boolean {			var menuName:String = tabGroup.chosenOption.name;			if (submenus[menuName].finished) {				applySettings();				trace(menuName, "checked out");				return true;			}			trace(menuName, "failed");			return false;		}	}}