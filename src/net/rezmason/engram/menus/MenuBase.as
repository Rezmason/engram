package net.rezmason.engram.menus {		// IMPORT STATEMENTS	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Shape;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.text.StaticText;	import flash.text.TextField;	import flash.text.TextFormatAlign;		import net.rezmason.display.ColorSprite;	import net.rezmason.gui.GUIAbstract;	import net.rezmason.gui.GUIBtnKey;	import net.rezmason.gui.GUIButton;	import net.rezmason.gui.GUICheckBox;	import net.rezmason.media.SoundManager;	import net.rezmason.utils.camelToCaps;		public class MenuBase extends ColorSprite {		// INSTANCE PROPERTIES		private var currentButton:GUIButton;		private var currentChild:DisplayObject;		//private var buttons:Array = new Array;		protected var _defaultYes:GUIButton, _defaultNo:GUIButton;		private var scratch:int;		private var soundManager:SoundManager;				public function MenuBase(colorButtons:Boolean = true, 		alignButtons:Boolean = true, nameButtons:Boolean = true):void {						var ike:int;						if (nameButtons || colorButtons) {				for (ike = 0; ike < numChildren; ike += 1) {					currentChild = getChildAt(ike);					if (currentChild is GUIButton) {						currentButton = currentChild as GUIButton;												if (colorButtons) {							addColorChild(currentButton);							}												if (nameButtons) {														scratch = currentButton.name.indexOf("btn");							if (scratch == -1) {								scratch = 0;							} else {								scratch += 3;							}														currentButton.text = camelToCaps(currentButton.name.substr(scratch));						}					}				}			}						if (alignButtons) {				addEventListener(Event.ADDED, decideOnButtonTextAlignments);			}						soundManager = SoundManager.INSTANCE;			addSounds(this);		}				// GETTERS & SETTERS				public function get defaultYes():GUIButton {			return _defaultYes;		}				public function get defaultNo():GUIButton {			return _defaultNo;		}				// PUBLIC METHODS				public function decideOnButtonTextAlignments(event:Event = null):void {						if (event) {				removeEventListener(Event.ADDED, decideOnButtonTextAlignments);			}						var buttons:Array = new Array;			var middleLine:Number;			var scratch:Number;			var ike:int;			middleLine = (getBounds(this).topLeft.x + getBounds(this).bottomRight.x) / 2;						// find buttons			for (ike = 0; ike < numChildren; ike += 1) {				if (getChildAt(ike) is GUIButton) {					currentButton = getChildAt(ike) as GUIButton;										if (currentButton.getBounds(this).bottomRight.x < middleLine - 5) {						currentButton.textAlign = TextFormatAlign.LEFT;					} else if (currentButton.getBounds(this).topLeft.x > middleLine + 5) {						currentButton.textAlign = TextFormatAlign.RIGHT;					} else {						currentButton.textAlign = TextFormatAlign.CENTER;					}				}			}		}				// PRIVATE & PROTECTED METHODS				private function addSounds(target:DisplayObjectContainer):void {			var ike:int;			var dObj:DisplayObject;			for (ike = 0; ike < target.numChildren; ike += 1) {				dObj = target.getChildAt(ike);				if (dObj is GUIBtnKey || dObj is GUIButton || dObj.name.indexOf("btn") == 0) {					dObj.addEventListener(MouseEvent.MOUSE_DOWN, playButtonSound, false, 0, true);				} else if (dObj is GUICheckBox || dObj is GridMenuElement) {					dObj.addEventListener(MouseEvent.CLICK, playCheckBoxSound, false, 0, true);				}			}		}				protected function playButtonSound(event:Event = null):void {			soundManager.play("buttonSound");		}				protected function playCheckBoxSound(event:Event = null):void {			soundManager.play("settingSound");		}	}}