package net.rezmason.engram {		import flash.display.BitmapData;	import flash.display.BlendMode;	import flash.display.GradientType;	import flash.display.Shape;	import flash.geom.Matrix;		internal class PromptSurface extends WindowSurface {				// INSTANCE PROPERTIES		private var stripe:Shape = new Shape;		private var stripes:BitmapData = new Stripes(0, 0) as BitmapData;		private var scaleVal:Number = 0.4;		private var stripeThickness:Number = 30;		private var smallMatrix:Matrix = new Matrix(scaleVal, 0, 0, scaleVal);				// CONSTRUCTOR		public function PromptSurface(w:Number, h:Number):void {						bevelAmount ||= 10;			edgeAmount ||= 2;						super(w, h);						stripe.blendMode = BlendMode.DARKEN;		}				// PUBLIC METHODS				override public function redraw(w:int = AUTO, h:int = AUTO):void {			if (stripe.parent == this) {				removeChild(stripe);			}			super.redraw(w, h);			redrawStripes(w, h);			addChild(stripe);		}				public function makeSillhouette(target:Shape):Shape {			with (target.graphics) {				clear();				beginFill(0x000000);				drawRoundRect(0, 0, width, height, bevelAmount, bevelAmount);				endFill();			}			return target;		}				public function makeStickerBack(target:Shape):Shape {			var box:Matrix = new Matrix;			var colors:Array = [0xDDDDDD, 0xFFFFFF, 0xDDDDDD];			var ratios:Array = [0, 168, 255];			var rad:Number = -Math.random() * Math.PI * 0.3;			box.createGradientBox(height, height, rad, Math.cos(rad) * height, Math.sin(rad) * height);			with (target.graphics) {				clear();				beginGradientFill(GradientType.LINEAR, colors, [1, 1, 1], ratios, box);				drawRoundRect(0, 0, width, height, bevelAmount, bevelAmount);				endFill();			}			return target;		}				// PRIVATE METHODS				private function redrawStripes(w:int, h:int):void {			with (stripe.graphics) {				clear();				beginBitmapFill(stripes, smallMatrix, true, true);				drawRect(edgeAmount, edgeAmount * 1.5, w - 2 * edgeAmount, stripeThickness);				endFill();			}		}			}}