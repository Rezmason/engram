package net.rezmason.engram.menus {		// IMPORT STATEMENTS	import flash.display.InteractiveObject;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		import net.rezmason.display.DisplayObjectSlider;	import net.rezmason.engram.IController;	import net.rezmason.engram.IView;	import net.rezmason.engram.SettingsManager;	import net.rezmason.engram.modules.ModuleLoader;	import net.rezmason.gui.GUIGroup;		import com.robertpenner.easing.Quartic;		public final class SettingsMenu extends MenuBase {				// INSTANCE PROPERTIES		private var _options:Object;				private var submenus:Object, submenuArray:Array;		private var currentMenuIndex:int = 0;		private var tabs:Array;		private var keySubmenu:KeySubmenu;		private var imageSubmenu:ImageSubmenu;		private var soundSubmenu:SoundSubmenu;		private var moduleSubmenu:ModuleSubmenu;		private var resetSubmenu:ResetSubmenu;		private var loaders:Array;						private var _inputObject:InteractiveObject;		private var settingsManager:SettingsManager = SettingsManager.INSTANCE;		private var _controller:IController;		private var _view:IView;				private var slider:DisplayObjectSlider = new DisplayObjectSlider(500);		private var tabGroup:GUIGroup = new GUIGroup;						public function SettingsMenu(__controller:IController, __view:IView):void {						_controller = __controller;			_view = __view;			_inputObject = _view.stage;									keySubmenu = new KeySubmenu(this);			imageSubmenu = new ImageSubmenu(this);			soundSubmenu = new SoundSubmenu(this);			moduleSubmenu = new ModuleSubmenu(this);			resetSubmenu = new ResetSubmenu(this);						addChild(slider);			slider.addEventListener(Event.COMPLETE, finishSlide);						_defaultYes = null;			_defaultNo = btnReturn;						addColorChild(tabBar);						submenus = {				keys:keySubmenu,				image:imageSubmenu,				sound:soundSubmenu,				modules:moduleSubmenu,				reset:resetSubmenu			};						submenuArray = [keySubmenu, imageSubmenu, soundSubmenu, moduleSubmenu, resetSubmenu];						var prop:String;						for (prop in submenus) {				addColorChild(submenus[prop]);			}						tabGroup.addGUIAbstract(tbKeys);			tabGroup.addGUIAbstract(tbImage);			tabGroup.addGUIAbstract(tbSound);			tabGroup.addGUIAbstract(tbModules);			tabGroup.addGUIAbstract(tbReset);			tabGroup.defaultOption = tbKeys;			tabs = tabGroup.radioChildren;						tabGroup.addEventListener(Event.CHANGE, swapTabs);						btnReturn.addEventListener(MouseEvent.CLICK, keySubmenu.revertKey);			btnReturn.addEventListener(MouseEvent.CLICK, applySettings);			btnReturn.addEventListener(MouseEvent.CLICK, _controller.interpretSettings);			btnReturn.addEventListener(MouseEvent.CLICK, _controller.showLast);						resetSubmenu.addEventListener("reset", resetSystem);			resetSubmenu.addEventListener("crashDump", _view.showCrashDump);						keySubmenu.keyPairs = settingsManager.keyPairs;			keySubmenu.syncKeys();						_options = settingsManager.options;		}				// GETTERS & SETTERS				override public function get listening():Boolean {			return keySubmenu.listening;		}				internal function get inputObject():InteractiveObject {			return _inputObject;		}				internal function get options():Object {			return _options;		}				// PUBLIC METHODS				override public function prepare(...args):void {			if (args.length) {				moduleSubmenu.list = args[0];			}			swapTabs(null, keySubmenu);			tbKeys.chosen = true;		}				override public function rerez(ratio:Number = 1):void {			for (var prop:String in submenus) {				submenus[prop].rerez(ratio);			}		}				// INTERNAL METHODS				internal function zap():void {			_view.zap();		}				internal function defaultKeys():void {			settingsManager.defaultKeys();			keySubmenu.keyPairs = settingsManager.keyPairs;		}				internal function applySettings(event:Event = null):void {			settingsManager.keyPairs = keySubmenu.keyPairs;			settingsManager.options = _options;			_controller.interpretSettings();		}				// PRIVATE & PROTECTED METHODS				private function enableMouse(event:Event = null):void {			mouseEnabled = mouseChildren = true;		}				private function disableMouse(event:Event = null):void {			mouseEnabled = mouseChildren = false;		}				private function swapTabs(event:Event = null, incomingSubmenu:Submenu = null):void {						var speed:Number = event ? 1 : 0;						if (event) {				applySettings();			}						if (!incomingSubmenu) {				var menuName:String = tabGroup.chosenOption.name;				menuName = menuName.replace("tb", "").toLowerCase();				if (slider.currentSubject == submenus[menuName]) {					return;				}				incomingSubmenu = submenus[menuName]			}						if (speed) {				disableMouse();			}						var nextMenuIndex:int = submenuArray.indexOf(submenus[menuName]);			var angle:Number = nextMenuIndex < currentMenuIndex ? 180 : 0;						slider.show(incomingSubmenu, incomingSubmenu.standIn, speed, Quartic.easeInOut, angle);			txtDescription.text = incomingSubmenu.description.toUpperCase();			currentMenuIndex = nextMenuIndex;		}				private function finishSlide(event:Event):void {			enableMouse();			(slider.currentSubject as Submenu).trigger();		}				private function resetSystem(event:Event):void {			_controller.resetSystem(event);		}	}}