package net.rezmason.engram.games.busybodhi {		// IMPORT STATEMENTS	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.ColorTransform;	import flash.utils.getTimer;	import flash.utils.Timer;		import net.rezmason.engram.modules.Game;	import net.rezmason.engram.modules.GameModule;	import net.rezmason.engram.modules.GameType;	import net.rezmason.engram.modules.ModuleKeyRoles;	import net.rezmason.engram.modules.ModuleView;	import net.rezmason.media.SoundManager;			public final class BusyBodhi extends GameModule {				// CLASS PROPERTIES		//private static const TEMPO:int = 200;		//private static const MAX_MULTIPLIER:int = 4, MIN_MULTIPLIER:int = 1;		// INSTANCE PROPERTIES		private var _bbGame:BBGame = new BBGame;		private var _bbView:BBView = new BBView(_bbGame);		private var _bbSettingsView:BBSettingsView = new BBSettingsView(_bbGame);				//private var _updateOffset:int = 50;				private var _alive:Boolean = false;		//private var comboHistory:Array, timeHistory:Array;		//private var tempo:Number = TEMPO;		//private var multiplier:Number = MAX_MULTIPLIER;		//private var sumInputTempo:int, inputCount:int;		private var soundManager:SoundManager = SoundManager.INSTANCE;		//private var metronomeMod:int = 0, metronomeTime:int = 4;		//private var metronome:Timer = new Timer(1000);		//private var beatTimer:Timer = new Timer(1000, 1);		//private var windowOpen:Boolean = false;						public function BusyBodhi():void {						_defaultSettings["Example"] = true;						_game = _bbGame as Game;			_view = _bbView as ModuleView;			_settingsView = _bbSettingsView as ModuleView;						addColorChild(_view);						_title = "BusyBodhi";			_version = "1.0";			_author = "Rezmason";						_sounds.highFlickSound = new HighFlickSound, _channels.highFlickSound = 1;			_sounds.flickSound = new FlickSound, _channels.flickSound = 1;						//addChild(new ThisIsNotAStandaloneFlashThingyShape);						_icon = new GameIcon;						loaderInfo.addEventListener(Event.INIT, initComplex, false, 0, true);						//metronome.addEventListener(TimerEvent.TIMER, tick);			//beatTimer.addEventListener(TimerEvent.TIMER_COMPLETE, metronomeBeat);		}				// GETTERS & SETTERS				override public function get score():int {			return super.score;		}				// PUBLIC METHODS				override public function unlock():void {			super.unlock();		}				override public function reset(event:Event = null):void {			super.reset();			//comboHistory = [];			//timeHistory = [];			_alive = false;			//windowOpen = false;		}				override public function resize(ratio:Number = 1, updateView:Boolean = false):void {			_bbView.resize(ratio);			if (updateView) {				//_bbView.update();			}		}				override public function start(event:Event = null, gameType:String = null, debug:Boolean = false):void {						super.start();						interpretSettings();						if (debug) {				_bbGame.debug();			}						_alive = true;			beginNewRound();						switch (_gameType) {				default :				case GameType.ARCADE :					trace("BB: ARCADE!");				break;				case GameType.STUDIO :					trace("BB: STUDIO!");				break;				case GameType.DRILL :					trace("BB: DRILL!");				break;			}						//_bbView.update();		}				override public function pause(event:Event = null):void {			//stopMetronome();			super.pause();		}				override public function resume(event:Event = null):void {			super.resume();						if (!_alive) {				_alive = true;				beginNewRound();			} else {				/*				sumInputTempo = tempo;				inputCount = 1;				playMetronome(tempo);				*/			}			//_bbView.update();		}				override public function end(event:Event = null):void {			super.end();		}				// PRIVATE & PROTECTED METHODS				override protected function interpretSettings():void {						if (_settings["Example"] != undefined) {			}			/*			if (_generalOptions.blnEffects) {				_bbGame.addEventListener(BBEvent.CRISIS, startSweat, false, 0, true);				_bbGame.addEventListener(BBEvent.CRISIS_AVERTED, stopSweat, false, 0, true);				_bbGame.addEventListener(BBEvent.CLAP_ON, showBeam, false, 0, true);				_bbGame.addEventListener(BBEvent.CLAP_OFF, hideBeam, false, 0, true);			} else {				_bbGame.removeEventListener(BBEvent.CRISIS, startSweat);				_bbGame.removeEventListener(BBEvent.CRISIS_AVERTED, stopSweat);				_bbGame.removeEventListener(BBEvent.CLAP_ON, showBeam);				_bbGame.removeEventListener(BBEvent.CLAP_OFF, hideBeam);				_bbView.hideBeam();				_bbView.stopSweat();			}			*/		}				override protected function handleKeyDown(inputType:String):void {			/*			if (windowOpen && isComboButton(inputType)) {				windowOpen = false;				comboHistory.push(String(inputType + " " + (metronomeMod % multiplier).toString()));				if (comboHistory.length > 16) {					comboHistory.shift();				}				timeHistory.push(metronomeMod % multiplier);				if (timeHistory.length > 4) {					timeHistory.shift();				}				if (multiplier != MIN_MULTIPLIER && metronomeMod % (multiplier / 2) <= 1) {					trace("speedup");				} else if (multiplier != MAX_MULTIPLIER && metronomeMod % (multiplier * 2) <= 1) {					trace("slowdown");				}			}			_bbView.buddy.traceField.text = timeHistory.join("");			*/		}				private function initComplex(event:Event):void {			if (free) {				//trace("stage:", stage);				stage.focus = stage;								stage.addEventListener("keyDown", function(e:*):void { 					var val:String					switch (e.keyCode) {						case 90:							val = ModuleKeyRoles.AKEY;						break;						case 88:							val = ModuleKeyRoles.BKEY;						break;						case 65:							val = ModuleKeyRoles.XKEY;						break;						case 83:							val = ModuleKeyRoles.YKEY;						break;					}					handleKeyDown(val); 				});								x = stage.stageWidth / 2;				y = stage.stageHeight / 2;				unlock();				reset();				start();			}		}				private function beginNewRound():void {			/*			tempo = TEMPO;			sumInputTempo = tempo;			inputCount = 1;						playMetronome(tempo);			*/		}		/*		private function playMetronome(duration:int = 1000):void {			metronome.reset();			beatTimer.reset();			metronomeMod = 0;			metronomeTime = 4 * multiplier;			metronome.delay = duration;			beatTimer.delay = _updateOffset;			tick();			metronome.start();			windowOpen = true;			beatTimer.start();		}				private function stopMetronome():void {			metronome.reset();			beatTimer.reset();		}				private function tick(event:Event = null):void {			windowOpen = true;			beatTimer.reset();			beatTimer.start();		}				private function metronomeBeat(event:Event):void {			if (metronomeMod == 0) {				soundManager.play("highFlickSound");				_bbView.transform.colorTransform = new ColorTransform(1, 0, 0);			} else if (metronomeMod % multiplier == 0){				soundManager.play("flickSound");				_bbView.transform.colorTransform = new ColorTransform(0, metronomeMod / metronomeTime, 0);			}			metronomeMod = (metronomeMod + 1) % metronomeTime;		}		*/		private function isComboButton(inputType:String):Boolean {			switch (inputType) {				case ModuleKeyRoles.AKEY:				case ModuleKeyRoles.BKEY:				case ModuleKeyRoles.XKEY:				case ModuleKeyRoles.YKEY:				return true;			}			return false;		}	}}