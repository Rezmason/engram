package net.rezmason.engram.games.busybodhi {		// IMPORT STATEMENTS	import flash.events.Event;	import flash.events.EventDispatcher;		import net.rezmason.engram.modules.ModuleEvent;		internal final class BBEvent extends ModuleEvent {				// CLASS PROPERTIES		internal static const TRACK_REMOVED:String = "trackRemoved";		internal static const TRACK_ADDED:String = "trackAdded";		internal static const TRACK_SETTLED:String = "trackSettled";		internal static const TILES_TOUCHED:String = "tilesTouched";		internal static const TILE_SPRITE_OFFSCREEN:String = "tileSpriteOffscreen";		internal static const TURNING_POINT:String = "turningPoint";		internal static const TILE_ADDED:String = "tileAdded";		internal static const TILE_CLEARED:String = "tileCleared";		internal static const TILE_GONE:String = "tileGone";		internal static const TILE_MOVED:String = "tileMoved";		internal static const TILE_LIT:String = "tileLit";		internal static const UPDATE_COMBO:String = "updateCombo";		internal static const CLEAR_COMBO:String = "clearCombo";				// INSTANCE PROPERTIES		internal var index:int = 0;		internal var address:String = "";		internal var length:int = 0;		internal var ending:String = BBEnding.LOOPY;		internal var altitude:Number = 0, shift:Number = 0;				public function BBEvent( type:String, wrth:int = 0, bubbles:Boolean = true, cancelable:Boolean = false ):void {			super(type, wrth, bubbles, cancelable);					}				// PUBLIC METHODS				override public function clone():Event {			return new BBEvent(type, worth, bubbles, cancelable);		}				// GETTERS & SETTERS								// STATIC METHODS				public static function yell(dispatcher:EventDispatcher, type:String, params:Object = null):void {			var event:BBEvent = new BBEvent(type);			if (params) {				for (var prop:String in params) {					event[prop] = params[prop];				}			}			dispatcher.dispatchEvent(event);		}	}}