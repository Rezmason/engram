package net.rezmason.engram.display {		// IMPORT STATEMENTS	import flash.display.Shape;		import net.rezmason.display.GrimySurface;		public class WindowSurface extends GrimySurface {				// INSTANCE PROPERTIES		private var constructed:Boolean = false;		protected var grittySurface:WindowGrittySurface;		protected var edge:Shape = new Shape;		protected var bevelAmount:int, edgeAmount:int;				// CONSTRUCTOR		public function WindowSurface(w:Number, h:Number, grimeAmount:Number = 1):void {						bevelAmount ||= 12;			edgeAmount ||= 4;						grittySurface = new WindowGrittySurface(w - edgeAmount * 4, h - edgeAmount * 4, bevelAmount / 4);						addChild(edge);			addChild(grittySurface);						super(w, h);						addColorChild(grittySurface);						textureAlpha = grimeAmount;		}				// PUBLIC METHODS				override public function redraw(w:int = AUTO, h:int = AUTO):void {			redrawEdge(w, h);			redrawGrit(w, h);			super.redraw();		}				override public function rerez(ratio:Number = 1):void {			grittySurface.rerez(ratio);			//super.rerez(ratio);		}				// PRIVATE & PROTECTED METHODS				protected function redrawEdge(w:int, h:int):void {			with (edge.graphics) {				clear();				beginFill(0xFFFFFF);				drawRoundRect(0, 0, w, h, bevelAmount, bevelAmount);				endFill();				beginFill(0x000000);				drawRoundRect(edgeAmount, edgeAmount, w - edgeAmount * 2, h - edgeAmount * 2, bevelAmount / 2, bevelAmount / 2);				endFill();				/*				beginFill(0xFF0000);				drawRect(edgeAmount * 2, edgeAmount * 2, 300, 300);				endFill();				*/			}		}				protected function redrawGrit(w:int, h:int):void {			grittySurface.redrawWithBevel(w - edgeAmount * 4, h - edgeAmount * 4, bevelAmount / 4);			grittySurface.x = edgeAmount * 2;			grittySurface.y = edgeAmount * 2;		}	}}// IMPORT STATEMENTSimport flash.display.Shape;import net.rezmason.display.GrittySurface;// Helper class: WindowGrittySurfaceinternal class WindowGrittySurface extends GrittySurface {		// PRIVATE PROPERTIES	private var constructed:Boolean = false;	private var bevelMask:Shape = new Shape;	// CONSTRUCTOR	public function WindowGrittySurface(w:Number, h:Number, bevelAmount:Number):void {				redrawWithBevel(w, h, bevelAmount);				super();		constructed = true;	}		// PUBLIC METHODS		public function redrawWithBevel(w:int, h:int, bevelAmount:Number):void {		with (bevelMask.graphics) {			clear();			beginFill(0x000000);			drawRoundRect(0, 0, w, h, bevelAmount, bevelAmount);			endFill();		}				addChild(bevelMask);				if (constructed) {			redraw();		}	}}