package net.rezmason.gui {		// IMPORT STATEMENTS	import flash.display.InteractiveObject;	import flash.display.Stage;	import flash.events.MouseEvent;			public class GUIWindowWidget extends GUIAbstract {				//  CLASS PROPERTIES & CONSTANTS				// PRIVATE INSTANCE PROPERTIES		private static const CLOSE_WINDOW_EVENT:GUIEvent = new GUIEvent(GUIEvent.CLOSE_WINDOW);		private static const MINIMIZE_WINDOW_EVENT:GUIEvent = new GUIEvent(GUIEvent.MINIMIZE_WINDOW);		private static const MAXIMIZE_WINDOW_EVENT:GUIEvent = new GUIEvent(GUIEvent.MAXIMIZE_WINDOW);		private static const SUSPEND_EVENT:GUIEvent = new GUIEvent(GUIEvent.SUSPEND);		protected var _closeButton:InteractiveObject;		protected var _minimizeButton:InteractiveObject;		protected var _maximizeButton:InteractiveObject;		protected var _pauseButton:InteractiveObject;		protected var _offset:int;		private var uiManager:GUIManager;				// CONSTRUCTOR		public function GUIWindowWidget():void {			super(GUIAbstractEnforcer.INSTANCE);			uiManager = GUIManager.getInstance();		}				// PUBLIC METHODS				public function init(offset:int):void {						if (_closeButton) {				addColorChild(_closeButton);				_closeButton.addEventListener(MouseEvent.CLICK, closeWindow);			}						if (_minimizeButton) {				addColorChild(_minimizeButton);				_minimizeButton.addEventListener(MouseEvent.CLICK, minimizeWindow);			}						if (_maximizeButton) {				addColorChild(_maximizeButton);				_maximizeButton.addEventListener(MouseEvent.CLICK, maximizeWindow);			}						if (_pauseButton) {				addColorChild(_pauseButton);				_pauseButton.addEventListener(MouseEvent.CLICK, suspend);			}						_offset = offset;		}				public function addToStage(stg:Stage):void {			stg.addChild(this);		}				// PRIVATE & PROTECTED METHODS				private function closeWindow(event:MouseEvent):void {			// do closing stuff			dispatchEvent(CLOSE_WINDOW_EVENT);			uiManager.close();		}				private function minimizeWindow(event:MouseEvent):void {			// do minimizing stuff			SUSPEND_EVENT.suspendImmediately = true;			dispatchEvent(SUSPEND_EVENT);			dispatchEvent(MINIMIZE_WINDOW_EVENT);			uiManager.minimize();		}				private function maximizeWindow(event:MouseEvent):void {			// do maximizing stuff			SUSPEND_EVENT.suspendImmediately = true;			dispatchEvent(SUSPEND_EVENT);			dispatchEvent(MAXIMIZE_WINDOW_EVENT);			uiManager.toggleFullScreen();		}				private function suspend(event:MouseEvent):void {			// do pausing stuff			SUSPEND_EVENT.suspendImmediately = false;			dispatchEvent(SUSPEND_EVENT);		}	}}