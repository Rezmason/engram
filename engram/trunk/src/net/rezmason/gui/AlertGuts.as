package net.rezmason.gui {	import flash.display.BlendMode;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;		import net.rezmason.display.ColorSprite;	public class AlertGuts extends ColorSprite {				// CLASS PROPERTIES		public static const TOP_MARGIN:int = 25;		public static const MARGIN:int = 15;		public static const SYMBOL_MARGIN:int = 10;		public static const TEXT_MARGIN:int = 5;		public static const BUTTON_MARGIN:int = 5, BUTTON_GAP:int = 100;		public static const SYMBOL_WIDTH:Number = 80;				private static const DISAPPEAR_EVENT:Event = new Event(Prompt.DISAPPEAR);		private static const WHITE_CT:ColorTransform = new ColorTransform(1, 1, 1, 1, 0xFF, 0xFF, 0xFF, 0xFF);		private static const PLAIN_CT:ColorTransform = new ColorTransform();				// INSTANCE PROPERTIES				private var _whiteText:Boolean = false;		private var _symbolContainer:Sprite = new Sprite;		private var _leftButtons:Array = [], _rightButtons:Array = [];		private var _leftFunctions:Array, _rightFunctions:Array;		private var leftButtonContainer:Sprite = new Sprite, rightButtonContainer:Sprite = new Sprite;		private var currentButton:GUIButton;		private var _defaultNo:GUIButton, _defaultYes:GUIButton;		private var _currentFunction:Function;		private var _maxWidth:Number;		private var _data:AlertData;		// CONSTRUCTOR		public function AlertGuts(maxW:Number = Infinity):void {			addChild(_symbolContainer);			addChild(leftButtonContainer);			addChild(rightButtonContainer);			rightButtonContainer.scaleX = -1;						txtTitle.autoSize = TextFieldAutoSize.LEFT;			txtBody.autoSize = TextFieldAutoSize.LEFT;			txtBody.wordWrap = true;						maxWidth = maxW;						//_symbolContainer.blendMode = BlendMode.DARKEN;		}				// GETTERS & SETTERS				public function get defaultYes():GUIButton {			return _defaultYes;		}				public function get defaultNo():GUIButton {			return _defaultNo;		}				public function get maxWidth():Number {			return _maxWidth;		}				public function set maxWidth(value:Number):void {			_maxWidth = Math.max(0, value);			update();		}				public function get symbol():DisplayObject {			return _symbolContainer.getChildAt(0);		}				public function set symbol(value:DisplayObject):void {						while (_symbolContainer.numChildren) {				_symbolContainer.removeChildAt(0);			}						_symbolContainer.addChild(value);						sizeSymbolContainer();		}				public function get whiteText():Boolean {			return _whiteText;		}				public function set whiteText(value:Boolean):void {						var format:TextFormat;						if (_whiteText != value) {				_whiteText = value;								format = txtTitle.defaultTextFormat;				format.color = (_whiteText ? 0xFFFFFF : 0x000000);				txtTitle.defaultTextFormat = format;								format = txtBody.defaultTextFormat;				format.color = (_whiteText ? 0xFFFFFF : 0x000000);				txtBody.defaultTextFormat = format;								//_symbolContainer.blendMode = (_whiteText ? BlendMode.NORMAL : BlendMode.DARKEN);				leftButtonContainer.transform.colorTransform = (_whiteText ? WHITE_CT : PLAIN_CT);				rightButtonContainer.transform.colorTransform = (_whiteText ? WHITE_CT : PLAIN_CT);			}		}				// INTERNAL METHODS		public function show(data:AlertData):void {			_data = data;			update();		}				public function callFunction():void {			if (_currentFunction != null) {				_currentFunction();			}			_currentFunction = null;		}				// PRIVATE & PROTECTED METHODS				private function update():void {						if (!_data) {				return;			}						var _width:Number = _maxWidth;						// redraw the text						txtTitle.wordWrap = false;						if (_data.title) {				txtTitle.text = _data.title;			} else {				txtTitle.text = "";			}						if (txtTitle.width + txtTitle.x + MARGIN > _width) {				txtTitle.wordWrap = true;				txtTitle.width = _width - txtTitle.x - MARGIN;			}						txtBody.width = txtTitle.width;			if (_data.body) {				txtBody.text = _data.body;			} else {				txtBody.text = "";			}						_symbolContainer.x = MARGIN;			_symbolContainer.y = TOP_MARGIN + MARGIN;						txtTitle.x = txtBody.x = _symbolContainer.x + SYMBOL_WIDTH + SYMBOL_MARGIN;			txtTitle.y = TOP_MARGIN + MARGIN;			txtBody.y = txtTitle.y + txtTitle.height + TEXT_MARGIN;						while (leftButtonContainer.numChildren) {				leftButtonContainer.removeChildAt(0);			}						while (rightButtonContainer.numChildren) {				rightButtonContainer.removeChildAt(0);			}						_leftFunctions = [];			_rightFunctions = [];						if (_data.leftButtons) {				makeButtons(_data.leftButtons, _leftButtons, _leftFunctions, leftButtonContainer, 1, TextFormatAlign.LEFT);			}						if (_data.rightButtons) {				makeButtons(_data.rightButtons, _rightButtons, _rightFunctions, rightButtonContainer, -1, TextFormatAlign.RIGHT);			}						while (leftButtonContainer.width + 2 * BUTTON_MARGIN > maxWidth) {				leftButtonContainer.removeChildAt(leftButtonContainer.numChildren - 1);			}						while (rightButtonContainer.width + 2 * BUTTON_MARGIN > maxWidth) {				rightButtonContainer.removeChildAt(rightButtonContainer.numChildren - 1);			}						while (leftButtonContainer.width + BUTTON_GAP + rightButtonContainer.width + 2 * BUTTON_MARGIN > maxWidth) {				if (rightButtonContainer.numChildren > leftButtonContainer.numChildren) {					rightButtonContainer.removeChildAt(rightButtonContainer.numChildren - 1);				} else {					leftButtonContainer.removeChildAt(leftButtonContainer.numChildren - 1);				}			}						var rand:Number = Math.random();						_width = _maxWidth * rand + width * (1 - rand);						leftButtonContainer.x = MARGIN;			rightButtonContainer.x = leftButtonContainer.x + leftButtonContainer.width + BUTTON_GAP + MARGIN;			rightButtonContainer.x = Math.max(_width - MARGIN, rightButtonContainer.x);						txtTitle.width = width - txtTitle.x;			txtBody.width = width - txtBody.x;						rightButtonContainer.y = Math.max(_symbolContainer.y + SYMBOL_WIDTH + SYMBOL_MARGIN, txtBody.y + txtBody.height + TEXT_MARGIN);			rightButtonContainer.y += MARGIN;			leftButtonContainer.y = rightButtonContainer.y;		}				private function makeButtons(source:Array, buttonList:Array, funcList:Array, dest:Sprite, flipVal:Number, align:String):void {			var spacing:Number = 0;			for (var ike:int = 0; ike < source.length; ike++) {				if (!buttonList[ike]) {					buttonList[ike] = new AlertButton();					buttonList[ike].addEventListener(MouseEvent.CLICK, clickResponder);				}				funcList[ike] = source[ike].func;				currentButton = buttonList[ike];				currentButton.scaleX = flipVal;				currentButton.text = source[ike].name;				if (currentButton.text == _data.defaultNo) {					_defaultNo = currentButton;				} else if (currentButton.text == _data.defaultYes) {					_defaultYes = currentButton;				}				currentButton.textAlign = align;				currentButton.x = spacing;				spacing += currentButton.width + BUTTON_MARGIN;				dest.addChild(currentButton);			}		}				private function sizeSymbolContainer():void {						if (_symbolContainer.width > _symbolContainer.height) {				_symbolContainer.width = SYMBOL_WIDTH;				_symbolContainer.scaleY = _symbolContainer.scaleX;			} else {				_symbolContainer.height = SYMBOL_WIDTH;				_symbolContainer.scaleX = _symbolContainer.scaleY;			}						var rect:Rectangle = _symbolContainer.getBounds(_symbolContainer);						_symbolContainer.x += (SYMBOL_WIDTH - _symbolContainer.width ) / 2 - rect.x;			_symbolContainer.y += (SYMBOL_WIDTH - _symbolContainer.height) / 2 - rect.y;		}				private function clickResponder(event:MouseEvent):void {			var ike:int = 0;			var target:GUIButton = event.currentTarget as GUIButton;						if (_leftButtons.indexOf(target) !=  -1) {				_currentFunction = _leftFunctions[_leftButtons.indexOf(target)];			} else {				_currentFunction = _rightFunctions[_rightButtons.indexOf(target)];			}			_defaultNo = _defaultYes = null;			dispatchEvent(DISAPPEAR_EVENT);		}	}}