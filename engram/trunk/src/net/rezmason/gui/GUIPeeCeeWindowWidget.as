package net.rezmason.gui {		// IMPORT STATEMENTS	import flash.display.Stage;	import flash.events.MouseEvent;		public class GUIPeeCeeWindowWidget extends GUIWindowWidget {				// CONSTRUCTOR		public function GUIPeeCeeWindowWidget():void {			super();						try {				windowCloseButton;			} catch (error:Error) {				throw new GUIError(this, "windowCloseButton", "InteractiveObject");			}						try {				windowMinimizeButton;			} catch (error:Error) {				throw new GUIError(this, "windowMinimizeButton", "InteractiveObject");			}						try {				windowMaximizeButton;			} catch (error:Error) {				throw new GUIError(this, "windowMaximizeButton", "InteractiveObject");			}						try {				windowPauseButton;			} catch (error:Error) {				throw new GUIError(this, "windowPauseButton", "InteractiveObject");			}		}				// PUBLIC METHODS				override public function init(offset:int):void {						reduceImage.visible = false;			reduceImage.y = maximizeImage.y;			reduceImage.mouseEnabled = false;			maximizeImage.mouseEnabled = false;			windowMaximizeButton.addEventListener(MouseEvent.CLICK, swapMaximizeImages);						_closeButton = windowCloseButton;			_minimizeButton = windowMinimizeButton;			_maximizeButton = windowMaximizeButton;			_pauseButton = windowPauseButton;						super.init(offset);		}				override public function addToStage(stg:Stage):void {			stg.addChild(this);						x = stg.stageWidth - _offset;			y = _offset;		}				// PRIVATE METHODS				public function swapMaximizeImages(event:MouseEvent):void {			if (reduceImage.visible) {				reduceImage.visible = false;				maximizeImage.visible = true;			} else {				reduceImage.visible = true;				maximizeImage.visible = false;			}		}	}}