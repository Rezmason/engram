package net.rezmason.gui {		// IMPORT STATEMENTS	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;		public class GUIKnob extends GUIAbstract {				// CLASS PROPERTIES		protected var CHANGE_EVENT:GUIEvent = new GUIEvent(Event.CHANGE);				// INSTANCE PROPERTIES		protected var _draggingDial:Boolean = false;		protected var _defaultPosition:Number;		protected var _position:Number;		protected var _minPosition:Number, _maxPosition:Number;		protected var grasp:Number;		protected var _dial:DisplayObject;		protected var _stage:Stage;				// CONSTRUCTOR		public function GUIKnob():void {						super(GUIAbstractEnforcer.INSTANCE);						_defaultPosition ||= 0;			_minPosition ||= -1;			_maxPosition ||= 1;									if (!_dial) {				expectedChildren["dial"] = DisplayObject;			}						verifyChildren(this);						if (!_dial) {				_dial = dial;				addColorChild(dial, 1);			}						buttonMode = true;			useHandCursor = true;						_dial.addEventListener(MouseEvent.MOUSE_DOWN, grabDial);						position = defaultPosition;						if (stage) {				addStageListeners();			} else {				addEventListener(Event.ADDED_TO_STAGE, addStageListeners);			}		}				// GETTERS & SETTERS				public function get defaultPosition():Number{			return _defaultPosition;		}				public function set defaultPosition(value:Number):void {			_defaultPosition = value;		}				public function get position():Number {			return _position;		}				public function set position(value:Number):void {			_position = value || _defaultPosition;			_position = Math.min(_maxPosition, Math.max(_minPosition, _defaultPosition));						_dial.rotation = _position - 90;		}				// PUBLIC METHODS				public function letGo(event:MouseEvent = null):void {			if (_draggingDial) {				dropDial(event);			}		}						// PRIVATE & PROTECTED METHODS				protected function addStageListeners(event:Event = null):void {			_stage = stage;			_stage.addEventListener(MouseEvent.MOUSE_UP, letGo);			removeEventListener(Event.ADDED_TO_STAGE, addStageListeners);						position = defaultPosition;		}				protected function grabDial(event:Event):void {			if (_stage) {				_draggingDial = true;				grasp = Math.atan2(mouseY - _dial.y, mouseX - _dial.x) * 180 / Math.PI;				_stage.addEventListener(MouseEvent.MOUSE_MOVE, dragDial);			}		}				protected function dropDial(event:Event):void {			if (_stage) {				_draggingDial = false;				dragDial(event);				_stage.removeEventListener(MouseEvent.MOUSE_MOVE, dragDial);			}		}				protected function dragDial(event:Event):void {			var _lastRotation:Number = _dial.rotation, _offset:Number;			_dial.rotation = Math.atan2(mouseY - _dial.y, mouseX - _dial.x) * 180 / Math.PI;			_offset = _dial.rotation - _lastRotation;			while (Math.abs(_offset) > 360) {				if (_offset > 360) {					_dial.rotation -= 360;				} else {					_dial.rotation += 360;				}				_offset = _dial.rotation - _lastRotation;			}			_dial.rotation = Math.min(_maxPosition, Math.max(_minPosition, _dial.rotation));			_position = _dial.rotation + 90;			dispatchChange();		}				protected function dispatchChange():void {			CHANGE_EVENT.position = _position;			trace(_position);			dispatchEvent(CHANGE_EVENT);		}	}}